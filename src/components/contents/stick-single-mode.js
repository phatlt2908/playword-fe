"use client";

import Link from "next/link";
import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faHouse,
  faQuestion,
  faRankingStar,
} from "@fortawesome/free-solid-svg-icons";
import swal from "sweetalert2";

import stickApi from "@/services/stickApi";

import { b64DecodeUnicode } from "@/utils/commonUtils";

import SpinnerLoading from "@/components/utils/spinner-loading";
import BaseTimer from "@/components/utils/base-timer";
import StandardModal from "@/components/contents/standard-modal";
import UserInput from "@/components/contents/user-input";
import { useUserStore } from "@/stores/user-store";
import StickAnswerInput from "./stick-answer-input";

const turnTime = 90;

export default function StickSingle({ isLiteMode }) {
  const router = useRouter();
  const [isShowManual, setIsShowManual] = useState(!isLiteMode);
  const [characters, setCharacters] = useState([]);
  const [word, setWord] = useState("");
  const [description, setDescription] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isCheckingAnswer, setIsCheckingAnswer] = useState(false);
  const [isIncorrectAnswer, setIsIncorrectAnswer] = useState(false);
  const [point, setPoint] = useState(0);
  const [isOver, setIsOver] = useState(false);
  const [rank, setRank] = useState();
  const [streakNum, setStreakNum] = useState(0);

  const { user, setIsFirstTime } = useUserStore();

  const timerRef = useRef();

  useEffect(() => {
    getWord();

    const storage = localStorage.getItem("user-store");
    const storageData = JSON.parse(storage);

    if (!(storageData && storageData.state && storageData.state.isFirstTime)) {
      setIsShowManual(false);
    }
  }, []);

  useEffect(() => {
    if (!isShowManual) {
      setIsFirstTime(false);
      setIsLoading(false);
    }
  }, [isShowManual]);

  useEffect(() => {
    if (isOver) {
      stickApi
        .getResult(point, user.code)
        .then((response) => {
          setRank(response.data);
        })
        .catch((error) => {
          console.error(error);
        });
    }
  }, [isOver]);

  const getWord = () => {
    setIsIncorrectAnswer(false);
    setIsCheckingAnswer(true);

    stickApi
      .getWord()
      .then((response) => {
        const data = response.data;
        setCharacters(data.characters);
        setWord(b64DecodeUnicode(data.wordBase64Encoded));
        setDescription(b64DecodeUnicode(data.descriptionBase64Encoded));

        setIsCheckingAnswer(false);
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const onAnswer = (answer) => {
    setIsCheckingAnswer(true);
    stickApi
      .answer(answer)
      .then((response) => {
        if (!response.data.isSuccessful) {
          swal.fire({
            toast: true,
            position: "bottom",
            text: "[" + answer + "] Kh√¥ng ch√≠nh x√°c üò£",
            icon: "error",
            timer: 2000,
            showConfirmButton: false,
          });
          setStreakNum(0);
          setIsIncorrectAnswer(true);
          setIsCheckingAnswer(false);
        } else {
          swal.fire({
            toast: true,
            position: "bottom",
            title: "[" + response.data.wordDescription.word + "] Ch√≠nh x√°c üòç",
            html: `<div class="limit-2-lines">${response.data.wordDescription.description}</div>`,
            icon: "success",
            timer: 5000,
            showConfirmButton: false,
          });

          timerRef.current.update(3);
          setPoint(point + characters.length + streakNum);
          setStreakNum(streakNum + 1);
          getWord();
          setIsIncorrectAnswer(false);
        }
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const onSkip = () => {
    swal.fire({
      toast: true,
      position: "bottom",
      html: `<div class="limit-2-lines"><span class="has-text-weight-bold">${word}</span>: ${description}</div>`,
      icon: "info",
      timer: 5000,
      showConfirmButton: false,
    });

    timerRef.current.update(-5);
    setStreakNum(0);
    getWord();
  };

  return (
    <>
      {isOver ? (
        <>
          <div className="has-text-centered w-100">
            <h1 className="title is-1 base-background w-100">GAME OVER</h1>
          </div>
          <div className="has-text-centered mt-5 mb-5">
            <p className="is-size-4">ƒêi·ªÉm s·ªë: {point}</p>
            <p className="is-size-4">
              <span>X·∫øp h·∫°ng: {rank ? rank : "Kh√¥ng x·∫øp h·∫°ng"}</span>
              <span
                className="ml-2 is-size-6 hover-underlined cursor-pointer"
                onClick={() => router.push(`/xep-hang?game=2`)}
              >
                (Xem)
              </span>
            </p>
          </div>
          <div>
            <p className="is-size-6 mt-3 mb-4 has-text-centered">
              Nh·∫≠p t√™n ƒë·ªÉ l∆∞u danh s·ª≠ s√°ch üòú
            </p>
            <UserInput />
            {!isLiteMode && (
              <div className="buttons is-justify-content-center mt-5">
                <button
                  className="button is-large drawing-border"
                  onClick={() => location.reload()}
                >
                  Ch∆°i l·∫°i üí™
                </button>
                <Link href="/" className="button is-large drawing-border">
                  <span className="icon">
                    <FontAwesomeIcon icon={faHouse} />
                  </span>
                  <span>V·ªÅ trang ch·ªß</span>
                </Link>
              </div>
            )}
          </div>
        </>
      ) : (
        <>
          {isLoading ? (
            <SpinnerLoading />
          ) : (
            <>
              <div className="is-flex is-flex-direction-column is-align-items-center w-100">
                <div>
                  <span className="is-size-4">ƒêi·ªÉm: {point}</span>
                </div>

                {!isOver && (
                  <BaseTimer
                    ref={timerRef}
                    maxTime={turnTime}
                    onOver={() => {
                      swal
                        .fire({
                          title: "H·∫øt gi·ªù!",
                          timer: 1000,
                          showConfirmButton: false,
                        })
                        .then(() => {
                          setIsOver(true);
                        });
                    }}
                  />
                )}
              </div>

              <StickAnswerInput
                key={characters}
                characters={characters}
                onAnswer={onAnswer}
                onSkip={onSkip}
                isLoading={isCheckingAnswer}
                isError={isIncorrectAnswer}
              />
            </>
          )}

          {!isLiteMode && (
            <div>
              <Link
                href="/xep-hang?game=2"
                className="button p-2 cursor-pointer hover-underlined mr-2"
              >
                <FontAwesomeIcon icon={faRankingStar} size="sm" />
              </Link>
              <div
                className="button p-2 cursor-pointer hover-underlined"
                onClick={() => {
                  setIsShowManual(true);
                }}
              >
                <FontAwesomeIcon icon={faQuestion} size="sm" />
              </div>
            </div>
          )}
        </>
      )}

      {isShowManual && (
        <StandardModal id="manual" onClose={() => setIsShowManual(false)}>
          <div className="content">
            <div
              className="w-100 has-text-centered mb-4"
              onClick={() => setIsShowManual(false)}
            >
              <button className="button has-text-centered">B·∫Øt ƒë·∫ßu ch∆°i</button>
            </div>
            <p>
              <strong>Tr√πm Kh·∫Øc Nh·∫≠p T·ª´</strong> l√† tr√≤ ch∆°i gh√©p c√°c k√Ω t·ª± b·ªã
              x√°o tr·ªôn th√†nh t·ª´ c√≥ nghƒ©a. B·∫°n h√£y c·ªë g·∫Øng ƒë·∫°t ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÉm
              nh·∫•t c√≥ th·ªÉ.
            </p>
            <div className="has-text-centered is-size-2">
              K / H / ·∫Æ / C / N / H / ·∫¨ / P / T / ·ª™
            </div>
            <h2>Lu·∫≠t ch∆°i:</h2>
            <ul>
              <li>B·∫°n c√≥ 2 ph√∫t 30 gi√¢y</li>
              <li>
                M√°y s·∫Ω ƒë∆∞a ra c√°c t·ª´ bao g·ªìm 2 √¢m ti·∫øt v·ªõi v·ªã tr√≠ c√°c ch·ªØ c√°i b·ªã
                x√°o tr·ªôn. B·∫°n ph·∫£i ch·ªçn theo th·ª© t·ª± c√°c ch·ªØ c√°i ƒë·ªÉ gh√©p th√†nh t·ª´
                c√≥ nghƒ©a
              </li>
              <li>Gh√©p th√†nh c√¥ng s·∫Ω ƒë∆∞·ª£c c·ªông ƒëi·ªÉm v√† th√™m 3 gi√¢y th·ªùi gian</li>
              <li>S·ªë ƒëi·ªÉm ƒë∆∞·ª£c c·ªông s·∫Ω t∆∞∆°ng ·ª©ng v·ªõi s·ªë l∆∞·ª£ng ch·ªØ c√°i c·ªßa t·ª´ gh√©p</li>
              <li>Gh√©p th√†nh c√¥ng li√™n ti·∫øp s·∫Ω ƒë∆∞·ª£c c·ªông d·ªìn 1 ƒëi·ªÉm</li>
              <li>
                B·∫°n c√≥ th·ªÉ b·ªè qua n·∫øu t·ª´ qu√° kh√≥, m·ªói l·∫ßn b·ªè qua b·∫°n b·ªã -5s
              </li>
            </ul>

            <div
              className="w-100 has-text-centered mt-4"
              onClick={() => setIsShowManual(false)}
            >
              <button className="button has-text-centered">B·∫Øt ƒë·∫ßu ch∆°i</button>
            </div>
          </div>
        </StandardModal>
      )}
    </>
  );
}
