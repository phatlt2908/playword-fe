"use client";

import { useState, useEffect } from "react";

import { faPlay, faSearch } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useRouter } from "next/navigation";

import wordLinkApi from "@/services/wordLinkApi";
import StandardModal from "@/components/contents/standard-modal";
import SpinnerLoading from "@/components/utils/spinner-loading";

const roomNameExamples = [
  "ƒê·ªôc c√¥ c·∫ßu b·∫°i...",
  "C·∫ßn m·ªôt v√°n thua",
  "C·∫ßn m·ªôt tr·∫≠n th·∫Øng",
  "L√™u L√™u FA ü§™",
  "N·ªët v√°n n√†y th√¥i...",
  "Kh√¥ng t√™n",
  "ƒê·ª´ng v√†o! thua ƒë·∫•y...",
  "Ph√≤ng n√†y c√≥ qu√°i v·∫≠t",
  "Kh√¥ng ai th√®m v√†o",
  "CƒÉn ph√≤ng c·ªßa nh·ªØng k·∫ª l∆∞·ªùi bi·∫øng",
  "V√πng ƒë·∫•t c·∫•m",
  "C·ªïng th·ªùi gian",
  "N∆°i ·∫©n n√°u",
  "G√≥c thi·ªÅn ƒë·ªãnh",
  "Thi√™n ƒë∆∞·ªùng",
  "ƒê·ªãa ng·ª•c",
  "C·ª≠a h√†ng b√≠ m·∫≠t",
  "Ph√≤ng truy·ªÅn th·ªëng",
  "Ph√≤ng c·ªï",
  "Ph√≤ng hi·ªán ƒë·∫°i",
  "Ph√≤ng h·ªçc",
  "Ph√≤ng ng·ªß",
  "Ph√≤ng kh√°ch",
];

const WordLinkMultiSelection = () => {
  const router = useRouter();

  const [keyword, setKeyword] = useState("");
  const [roomList, setRoomList] = useState([]);
  const [isOpenCreateRoomPopup, setIsOpenCreateRoomPopup] = useState(false);
  const [roomName, setRoomName] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    search();
  }, []);

  useEffect(() => {
    setRoomName(
      roomNameExamples[Math.floor(Math.random() * roomNameExamples.length)]
    );
  }, [isOpenCreateRoomPopup]);

  const search = () => {
    setIsLoading(true);
    wordLinkApi
      .getRoomList(keyword)
      .then((response) => {
        setRoomList(response.data);
      })
      .catch((error) => console.log(error))
      .finally(() => setIsLoading(false));
  };

  const onCreateRoom = () => {
    setIsOpenCreateRoomPopup(false);
    const roomId = Math.random().toString(36).substring(2, 8);
    wordLinkApi
      .createRoom(roomId, roomName)
      .then(() => {
        router.push(`/noi-tu/nhieu-minh/${roomId}`);
      })
      .catch((error) => console.log("Can not create a new room ", error));
  };

  const onJoinRoom = (roomId) => {
    router.push(`/noi-tu/nhieu-minh/${roomId}`);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      onCreateRoom();
    }
  };

  return (
    <>
      <div className="columns">
        <div className="column is-narrow has-text-centered">
          <div
            className="button"
            onClick={() => setIsOpenCreateRoomPopup(true)}
          >
            T·∫°o ph√≤ng
          </div>
        </div>
        <div className="column">
          <div className="field has-addons">
            <div className="control">
              <input
                className="input drawing-border"
                type="text"
                placeholder="Nh·∫≠p m√£/t√™n ph√≤ng"
                onChange={(e) => setKeyword(e.target.value)}
              />
            </div>
            <div className="control">
              <button className="button" onClick={search}>
                <span className="icon is-small">
                  <FontAwesomeIcon icon={faSearch} />
                </span>
              </button>
            </div>
          </div>

          {isLoading ? (
            <div className="mt-2">
              <SpinnerLoading />
            </div>
          ) : (
            <div>
              {roomList && roomList.length ? (
                <table className="table is-fullwidth is-narrow is-hoverable">
                  <thead>
                    <tr>
                      <th>M√£ ph√≤ng</th>
                      <th>T√™n ph√≤ng</th>
                      <th>Ng∆∞·ªùi ch∆°i</th>
                    </tr>
                  </thead>
                  <tbody>
                    {roomList.map((room) => (
                      <tr
                        key={room.id}
                        className="cursor-pointer"
                        onClick={() => onJoinRoom(room.id)}
                      >
                        <th>{room.id}</th>
                        <th>{room.name}</th>
                        <th>{room.userCount}</th>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <p>Kh√¥ng t√¨m th·∫•y ph√≤ng</p>
              )}
            </div>
          )}
        </div>
      </div>
      {isOpenCreateRoomPopup && (
        <StandardModal
          id="room-creation"
          onClose={() => setIsOpenCreateRoomPopup(false)}
        >
          <label className="label">T√™n ph√≤ng</label>
          <div className="field has-addons">
            <div className="control">
              <input
                className="input"
                type="text"
                placeholder="T√™n ph√≤ng..."
                value={roomName}
                onChange={(e) => setRoomName(e.target.value)}
                onKeyDown={handleKeyDown}
                maxLength={50}
              />
            </div>
            <div className="control">
              <button className="button drawing-border" onClick={onCreateRoom}>
                <span className="icon">
                  <FontAwesomeIcon icon={faPlay} />
                </span>
              </button>
            </div>
          </div>
        </StandardModal>
      )}
    </>
  );
};

export default WordLinkMultiSelection;
